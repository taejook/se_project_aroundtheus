!function(){"use strict";class e{constructor(e,t,s){let{name:r,link:n}=e;this._data={name:r,link:n},this._name=r,this._link=n,this._cardSelector=t,this._handleImageClick=s}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeIcon()})),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteCard()})),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}_handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}_handleLikeIcon(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".cards__title"),this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name+" Image",this._cardTitleEl.textContent=this._name,this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e){this.errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this.errorMessageElement.textContent=e.validationMessage,this.errorMessageElement.classList.add(this._errorClass)}_hideInputError(e){this.errorMessageElement=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this.errorMessageElement.textContent=" ",this.errorMessageElement.classList.remove(this._errorClass)}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_toggleButtonState(){this._hasInvalidInput(this._inputEls)?this.disableButton():(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1)}_hasInvalidInput(e){return!e.every((e=>e.validity.valid))}_setEventListeners(){this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._form.reset(),this._toggleButtonState(),this._inputEls.forEach((e=>{this._hideInputError(e)}))}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keyup",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keyup",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal_opened")&&this.close()})),this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal__close")&&this.close()}))}}class r extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t}_getInputValues(){const e=Array.from(this._popupForm.querySelectorAll(".modal__input")),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}document.querySelectorAll(".modal__form");const n=document.querySelector("#profile-edit-button"),o=document.querySelector("#profile-edit-modal"),i=document.querySelector("#add-card-modal"),a=document.querySelector("#preview-image-modal"),l=(o.querySelector("#profile-modal-close"),i.querySelector("#add-card-modal-close"),a.querySelector("#preview-modal-close"),document.querySelector(".modal__preview-image"),document.querySelector(".modal__preview-name"),document.querySelector(".profile__title"),document.querySelector(".profile__description"),document.querySelector("#profile-edit-form")),c=document.querySelector("#add-card-form"),d=(document.querySelector(".cards__list"),document.querySelector("#card-template").content.firstElementChild,document.querySelector(".profile__add-button")),u=document.querySelector("#profile-title-input"),h=document.querySelector("#profile-description-input"),m=(c.querySelector(".modal__input_type_title"),c.querySelector(".modal__input_type_url"),document.querySelectorAll(".modal__close"),i.querySelector("#add-modal-button"),{formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"}),_=new class extends s{constructor(e){super({popupSelector:e}),this._image=this._popupElement.querySelector(".modal__preview-image"),this._caption=this._popupElement.querySelector(".modal__preview-description")}open(e){this._image.setAttribute("src",e.link),this._image.setAttribute("alt",e.name),this._caption.textContent=e.name,super.open()}}("#preview-image-modal");_.setEventListeners();const p=new r("#add-card-modal",(function(e){console.log(e),y(e),p.close(),b.disableButton(),c.reset()}));p.setEventListeners();const E=new r("#profile-edit-modal",(function(e){L.resetValidation(),v.setUserInfo({name:e.title,description:e.description}),E.close(),L.disableButton()}));E.setEventListeners();const f=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItems(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:y},".cards__list"),v=new class{constructor(e,t){this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(t)}getUserInfo(){return{name:this._nameElement.textContent,description:this._jobElement.textContent}}setUserInfo(e){this._nameElement.textContent=e.name,this._jobElement.textContent=e.description}}(".profile__title",".profile__description"),S=new class{constructor(e){this._baseURL=e.baseURL,this._headers=e.headers}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getInitialCards(){return fetch(`${this._baseURL}/cards`,{method:"GET",headers:this._headers}).then((e=>this._checkResponse(e)))}getUserInfo(){return fetch(`${this._baseURL}/users/me`,{method:"GET",headers:this._headers}).then((e=>this._checkResponse(e)))}updateUserInfo(){return fetch(`${this._baseURL}/user/me`,{method:"PATCH",headers:this._headers}).then((e=>this._checkResponse(e)))}updateAvatar(){return fetch(`${this._baseURL}/user/me/avatar`,{method:"PATCH",headers:this._headers}).then((e=>this._checkResponse(e)))}createCards(){return fetch(`${this._baseURL}/cards`,{method:"POST",headers:this._headers}).then((e=>this._checkResponse(e)))}deleteCards(){return fetch(`${this._baseURL}/cards/:cardId`,{method:"DELETE",headers:this._headers}).then((e=>this._checkResponse(e)))}likeCards(){return fetch(`${this._baseURL}/cards/:cardId/likes`,{method:"PUT",headers:this._headers}).then((e=>this._checkResponse(e)))}dislikeCards(){return fetch(`${this._baseURL}/cards/:cardId/likes`,{method:"DELETE",headers:this._headers}).then((e=>this._checkResponse(e)))}}({baseURL:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"ce0e6719-cfff-44ae-95da-d365cf911af3","Content-Type":"application/json"}});function g(e){_.open(e)}function y(t){const s=new e(t,"#card-template",g).getView();f.addItems(s)}n.addEventListener("click",(()=>{const e=v.getUserInfo();console.log(e),L.resetValidation(),u.value=e.name,h.value=e.description,E.open()})),d.addEventListener("click",(()=>{p.open()})),S.getInitialCards().then((e=>{f.setItems(e),f.renderItems()})).catch((e=>{alert(`${e} Failed to get cards.`)})),S.getUserInfo().then((e=>{v.setUserInfo({name:e.title,description:e.description})}));const L=new t(m,l),b=new t(m,c);L.enableValidation(),b.enableValidation(),fetch("https://around-api.en.tripleten-services.com/v1/cards",{headers:{authorization:"ce0e6719-cfff-44ae-95da-d365cf911af3"}}).then((e=>e.json())).then((e=>{console.log(e)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,